dplyr::select(decibels, where(is.factor))%>% #select price and all categorical predictors
ggplot(aes(x=chord.length,y=decibels))+
geom_boxplot()
```
#Box plot of price for categorical predictors
library(ggplot2)
airfoil_self_noise%>%
dplyr::select(decibels, where(is.factor))%>% #select price and all categorical predictors
ggplot(aes(x=chord.length,y=decibels))+
geom_boxplot()
```
#Box plot of price for categorical predictors
library(ggplot2)
airfoil_self_noise%>%
dplyr::select(decibels, where(is.factor))%>% #select price and all categorical predictors
ggplot(aes(x=chord.length,y=decibels))+
geom_boxplot()
#Box plot of price for categorical predictors
library(ggplot2)
airfoil_self_noise%>%
dplyr::select(decibels, where(is.factor))%>% #select price and all categorical predictors
ggplot(aes(x=chord.length,y=decibels))+
geom_boxplot()
#Box plot of price for categorical predictors
library(ggplot2)
airfoil_self_noise%>%
dplyr::select(decibels, where(is.factor))%>% #select price and all categorical predictors
ggplot(aes(x=chord.length,y=decibels))+
geom_boxplot()
airfoil_self_noise%>%
dplyr::select(decibels, where(is.factor))%>% #select price and all categorical predictors
ggplot(aes(x=speed,y=decibels))+
geom_boxplot()
knitr::opts_chunk$set(echo = TRUE)
a <- c(3,4,1)
a
z <- array(c(-1,1,7,0,6,1), dim = c(3,2))
z
#The maximum value of a
max(a)
d <- array(c(a,a), dim = c(3,2))
d
#The elements of a that are larger than the corresponding elements of the second column of z
ida <- a>z[,2]
a2 <- a[ida]
a2
#The sum of the product of z and d
sum(z*d)
#The product of a and z
a*z
#The product of d and z
d*z
convert.temperature <- function(x, from="F") {
if (!is.numeric(x)){
stop("Temperature must be numeric")
}
if (from!="C" & from!="F") {
stop("Invalid input specification")
}
if (from=="F") {
return((x - 32)*(5/9))
}  else {
return((x*(9/5)) + 32)
}
}
convert.temperature(20)
convert.temperature(20, from="C")
convert.temperature(c(0:100), from="C")
convert.temperature(-273.15, from="C")
convert.temperature <- function(x, from="F") {
if (!is.numeric(x)){
stop("Temperature must be numeric")
} else if (from!="C" & from!="F") {
stop("Invalid input specification")
}
result <- c()
n <- length(x)
if (from=="F") {
for (i in 1:n) {
result[i] <- (x[i] - 32)*(5/9)
if (result[i] < -273.15) result[i] <- NA
}
}  else {
for (i in 1:n) {
if (x[i] < -273.15) result[i] <- NA
else result[i] <- (x[i]*(9/5)) + 32
}
}
if (any(is.na(result))) {
warning("The temperature must not be below -273.15 Celcius ")
}
return(result)
}
convert.temperature(c(100,0,-100,-200,-300), from="C")
star <- read.csv("starsearch.csv", skip = 2, header = TRUE)
nrow(star) #The number of rows of star
ncol(star) #The number of columns of star
star$Month <- as.Date(paste(star$Month, "01", sep="-"), format = "%Y-%m-%d")
plot(star$Month, star$star.wars...Worldwide., type="l", xlab = "Time", ylab = 'Number of "star wars" searches', main = 'Line graph of the “star wars” searches over time')
maxvalue <- function(n,x,y) {
max.search <- 0
m<- ""
for (i in 1:nrow(star)) {
if ((format(star$Month[i],"%Y") >= x) & (format(star$Month[i],"%Y") <= y)) {
if (max.search < star$star.wars...Worldwide.[i]) {
max.search <- star$star.wars...Worldwide.[i]
m <- star$Month[i]
}
}
}
paste0("peak ",n,": (month = ",m,", number of searches = ", max.search, ")" )
}
maxvalue(1,"2004","2010")
maxvalue(2,"2010","2023")
#The months where there were more ‘star trek’ searches than ‘star wars’ searches
star$Month[star$star.trek...Worldwide.>star$star.wars...Worldwide.]
x <- c(1,2,3)
y <- c(-4,2,8)
x=y
x
y
x <- c(1,2,3)
y <- c(-4,2,8)
x==y
x<-y
x
y
x <- c(1,2,3)
y <- c(-4,2,8)
x<(-y)
library(MASS)
hist(survey$Height, xlab = "Student heights", main = "Histogram of Student Heights")
boxplot(split(survey$Height, survey$Fold), xlab = "The different ways the students fold their arms", ylab = "Student heights", main = "Boxplots of heights vs. the different ways the students fold their arms", col = "dark red")
plot(survey$Height, survey$Pulse, xlab = "Student heights", ylab = "Pulse rate of student", main = "Scatterplot of pulse rate against student height")
survey$Exer <- factor(survey$Exer, levels = c("Freq","Some","None"),labels = c("No exercise","Some exercise","Frequent exercise"))
survey$Smoke <- factor(survey$Smoke, levels = c("Heavy","Regul","Occas","Never"), labels = c("Heavy","Regular","Occasional","Never"))
barplot(table(survey$Smoke, survey$Exer), beside=TRUE,
xlab="Exercise frequency", ylab="Number of students", main = "Barplots of the counts of people categorised by\n how much they exercise and whether they smoke\n", ylim=c(0,100), col=grey.colors(4))
legend("topright", legend=levels(survey$Smoke), title = "Smoking frequency", fill=grey.colors(4))
#ChatGPT initial release
ChatGPT.init <- ISOdate(2022,11,30)
#Day of the week when ChatGPT was first released
weekdays(ChatGPT.init)
#Date and time when the Titanic set sail from Southampton (UK time zone)
Titanic.SetSail.UK <- "10-04-1912 12:00:00" #“Europe/London” time zone
#Diffence between the two time zones (hour)
dif <- round(as.numeric(as.POSIXct(Titanic.SetSail.UK, tz="US/Eastern") - as.POSIXct(Titanic.SetSail.UK, tz = "Europe/London")))
#Diffence between the two time zones (second)
dif <- dif*60*60
#Date and time when the Titanic set sail from Southampton (US time zone)
as.POSIXct(Titanic.SetSail.UK, format = "%d-%m-%Y %H:%M:%S", tz = "US/Eastern") + dif
boxplot(split(airfoil_self_noise$decibels,airfoil_self_noise$chord.length), xlab = "Chord length", ylab = "Decibels", main = "Boxplots of decibels vs. Chord length")
#Box plot of price for categorical predictors
library(ggplot2)
airfoil_self_noise%>%
dplyr::select(decibels, where(is.factor))%>% #select price and all categorical predictors
ggplot(aes(x=chord.length,y=decibels))+
geom_boxplot()
airfoil_self_noise%>%
boxplot(split(decibels,chord.length), xlab = "Chord length", ylab = "Decibels", main = "Boxplots of decibels vs. Chord length")
airfoil_self_noise%>%
boxplot(split(decibels,chord.length), xlab = "Chord length", ylab = "Decibels", main = "Boxplots of decibels vs. Chord length")
boxplot(split(airfoil_self_noise$decibels,airfoil_self_noise$chord.length), xlab = "Chord length", ylab = "Decibels", main = "Boxplots of decibels vs. Chord length")
boxplot(split(airfoil_self_noise$decibels,airfoil_self_noise$chord.length), xlab = "Chord length", ylab = "Decibels", main = "Boxplots of decibels vs. Chord length")
boxplot(split(airfoil_self_noise$decibels,airfoil_self_noise$speed), xlab = "Speed", ylab = "Decibels", main = "Boxplots of decibels vs. Speed")
marks <- 0
qnum <- 0
qmarks <- 22
qnum <- qnum + 1
marks <- marks + qmarks
qstr <- sprintf("Q%d. (%d %s)", qnum, qmarks, ifelse(qmarks == 1, "Mark", "Marks"))
card.draw <- function(n, seed) {
if (!n%%1 == 0 | n<=0){
stop("n must be positive integer")
} else
if (!is.numeric(seed)){
stop("seed must be real number")
} else
set.seed(seed)
Suit <- sample(x = c("C", "D", "H", "S"), n, replace = TRUE, prob = rep (1/4,4))
Number <- sample(1 : 13, n, replace = TRUE, prob = rep(1 / 13, 13))
data.frame(Suit,Number)
}
card.draw(n = 3.7, seed = 2) # Q1(c)i.
card.draw(n = 3, seed = 'a') # Q1(c)ii.
card.draw(n = c(3, 2), seed = c(1, 2)) # Q1(c)iii.
card.draw(n = 4, seed = 0.3) # Q1(c)iv.
outcomes <- card.draw(n = 1000000, seed = 0)
sorting <- data.frame(table(outcomes$Suit))
sorting$rel.freq <- sorting$Freq / 1000000
barplot(sorting$rel.freq, ylim = c(0, 1), names.arg = c("Clubs", "Diamonds", "Hearts", "Spades"), xlab = "Suits", ylab = "Proportion", main = "Relative Frequencies of Outcomes (Suits)\nFrom 1,000,000 Random Card Draws", col = rep(gray(0.75), 6))
K <- nrow(sorting)
# Initialise a matrix in which to store information related to cumulative relative frequencies.
crf <- matrix(0, nrow = K, ncol = K)
for(i in 1 : K)
crf[((K - i) + 1) : K, i] <- sorting$rel.freq[1 : i]
barplot(crf, col = c(rep(gray (0.5), K - 1), 1), space = 0, names.arg = NULL, xlab = "", ylab = "Proportion", main = "Cumulative Relative Frequencies of Outcomes (Suits)\nFrom 1,000,000 Random Card Draws")
axis(side = 4, at = c(0.125, 0.375, 0.625, 0.875), labels = c("Clubs", "Diamonds", "Hearts", "Spades"), tick = FALSE, line = -2, las = 2)
outcomes <- card.draw(n = 1000000, seed = 0)
sorting <- data.frame(table(outcomes$Number))
sorting$rel.freq <- sorting$Freq / 1000000
barplot(sorting$rel.freq, ylim = c(0, 1), names.arg = 1:13, xlab = "Numbers", ylab = "Proportion", main = "Relative Frequencies of Outcomes (Numbers)\nFrom 1,000,000 Random Card Draws", col = rep(gray(0.75), 6))
K <- nrow(sorting)
# Initialise a matrix in which to store information related to cumulative relative frequencies.
crf <- matrix(0, nrow = K, ncol = K)
for(i in 1 : K)
crf[((K - i) + 1) : K, i] <- sorting$rel.freq[1 : i]
barplot(crf, col = c(rep(gray (0.5), K - 1), 1), space = 0, names.arg = NULL, xlab = "", ylab = "Proportion", main = "Cumulative Relative Frequencies of Outcomes (Numbers)\nFrom 1,000,000 Random Card Draws")
axis(side = 4, at = (c(1 : 13)/13)-0.038, labels = 1:13, tick = FALSE, line = -2, las = 2)
outcomes <- card.draw(n = 1000000, seed = 0)
sorting <- data.frame(table(outcomes$Suit))
x <- sorting[sorting$Var1=="C",]
x$Freq/1000000 #The proportion of the cards drawn that are clubs.
outcomes <- card.draw(n = 1000000, seed = 0)
sorting <- data.frame(table(outcomes$Number))
x <- sorting[7:13,]
sum(x$Freq)/1000000 #The proportion of the cards drawn that are 7 or higher.
# Store the possible values and probabilities for the random variable X.
x <- 1:13
px <- c(rep(1/13,13))
# Calculate the exact expected value.
EX <- sum(px * x)
EX
# Calculate the exact variance.
VX <- sum(px * (x - EX)^2)
VX
# Calculate the estimate expected value.
outcomes <- card.draw(n = 1000000, seed = 0)
mean(outcomes$Number)
# Calculate the estimate variance.
var(outcomes$Number)
qmarks <- 8
qnum <- qnum + 1
marks <- marks + qmarks
qstr <- sprintf("Q%d. (%d %s)", qnum, qmarks, ifelse(qmarks == 1, "Mark", "Marks"))
MontyHall <- function() {
prizes <- c("car", "goat", "goat")
door <- sample(x = prizes, size = 3,  replace = FALSE, prob = rep(1 / 3, times = 3))
contestant.door <- sample(x = 1 : 3,  size = 1) #The contestant selects one of the three doors.
available.doors <- 1 : 3
available.doors <- available.doors[-contestant.door] # Remove from consideration the door that was selected by the contestant.
montys.door <- sample(available.doors,  size = 1) # The door Monty will open randomly.
if (door[montys.door]=="car") {
return(0)
} else
if (door[contestant.door] == "car") {
return("Keep original choice")  # Keep original choice
} else
if (door[-c(contestant.door, montys.door)] == "car") {
return("Switch doors") # Switch doors
}
}
N <-10000
set.seed(0)
result <- data.frame()
for (a in 1:N) {
result <- rbind(result, MontyHall())
}
names(result) <- "Approach"
win <- data.frame(table(result[result$Approach!=0,]))
win$rel.Freq <- win$Freq/sum(win$Freq)
win <- win[-2]
names(win) <- c("Approach","rel.Freq")
win
qmarks <- 10
qnum <- qnum + 1
marks <- marks + qmarks
qstr <- sprintf("Q%d. (%d %s)", qnum, qmarks, ifelse(qmarks == 1, "Mark", "Marks"))
N <- 10000
set.seed(0)
wins <- 0
for (i in 1:N) {
initial.roll <- sample(1 : 6, size = 1)
if(initial.roll != 6) {
end <- 0
rolls <- 0
while(end == 0 & rolls < 6){
next.roll <- sample(1 : 6, size = 1)
rolls <- rolls + 1
if(next.roll == 6) {
end <- 1
} else
if(next.roll == initial.roll) {
end <- 1
wins <- wins + 1
}
}
}
}
wins/N
qmarks <- 10
qnum <- qnum + 1
marks <- marks + qmarks
qstr <- sprintf("Q%d. (%d %s)", qnum, qmarks, ifelse(qmarks == 1, "Mark", "Marks"))
library(network)
adjacency.matrix <- matrix(c(NA,0,1,0,0,1,
0,NA,0,1,0,0,
1,0,NA,0,1,1,
0,1,0,NA,0,0,
0,0,1,0,NA,1,
1,0,1,0,1,NA),
nrow = 6, byrow = TRUE,
dimnames = list(c("Allison", "Bob", "Cass", "Dennis", "Elliot", "Francis"),
c("Allison", "Bob", "Cass", "Dennis", "Elliot", "Francis")))
proximity.net <- network(adjacency.matrix, directed = FALSE)
adjacency.matrix
is.adjacent(proximity.net, 2, 3)
set.seed(0)
plot(proximity.net, displaylabels = TRUE, vertex.cex = 1.5, main = "Undirected Proximity Network")
knitr::opts_chunk$set(echo = TRUE)
movies<- read.csv("movies500.csv", header = TRUE)
movies_genres<- read.csv("movies500_genres.csv", header = TRUE)
genres<- read.csv("genres.csv", header = TRUE)
library(DBI)
library(RSQLite)
if (file.exists("movies.sqlite")) {
unlink('movies.sqlite', recursive=TRUE)
}
movies_conn <- dbConnect(RSQLite::SQLite(), "movies.sqlite")
dbWriteTable(movies_conn, "movies", movies, overwrite=TRUE)
dbWriteTable(movies_conn, "movies_genres", movies_genres, overwirte=TRUE)
dbWriteTable(movies_conn, "genres", genres, append=TRUE)
dbDisconnect(movies_conn)
library(dplyr)
library(tidyr)
vehicles <- read.csv("motor_vehicle_modified.csv", stringsAsFactors = FALSE)
vehicles_R <- vehicles
##dplyr
summarise(filter(vehicles, transmission_type=='4-gear auto' & (make=='Kia' | make=='Honda')),count=n())
##Base R
sum(vehicles_R$transmission_type=='4-gear auto' & (vehicles_R$make=='Kia' | vehicles_R$make=='Honda'))
##dplyr
vehicles <- vehicles %>% select(-vehicle_usage, -vehicle_type)
##dplyr
vehicles_country_status <- vehicles %>% group_by(original_country, import_status) %>%
summarise(Count=n())
##Base R
vehicles_country_status_R <- vehicles_R
vehicles_country_status_R <- aggregate(vehicles_country_status_R$original_country, by=list(vehicles_country_status_R$original_country,vehicles_country_status_R$import_status), FUN=length)
colnames(vehicles_country_status_R) <- c("original_country", "import_status", "Count")
##dplyr
sorted_vehicles_country_status <- filter(vehicles_country_status, import_status=='used') %>% arrange(desc(Count))
sorted_vehicles_country_status[1:3,]
##Base R
sorted_vehicles_country_status_R <- vehicles_country_status_R[vehicles_country_status_R$import_status=="used",]
sorted_vehicles_country_status_R <- sorted_vehicles_country_status_R[order(sorted_vehicles_country_status_R$Count, decreasing = TRUE),]
head(sorted_vehicles_country_status_R,3)
library(ggplot2)
data(starwars)
filter(starwars, is.na(species)==FALSE) %>% ggplot() +
geom_bar(aes(x=species)) +
coord_flip() +
labs(x = "Species", y = "Count", title = "The number of individuals of each species")
starwars_species <- starwars %>% group_by(species) %>% summarise(num=n())
starwars <- full_join(starwars,starwars_species)
starwars <- starwars %>% mutate(Mainspecies=starwars$species) %>%
rows_update(tibble(num=1, Mainspecies="Other"))
plot.settings <- filter(starwars, is.na(Mainspecies)==FALSE & is.na(height)==FALSE & is.na(mass)==FALSE) %>% ggplot(aes(x = height, y = mass)) +
labs(x = "Height (cm)", y = "Weight (kg)", title = "The scatter plot of weight and height of the mainspecies") +
theme_classic()
plot.settings + geom_point(aes(x = height, y = mass, colour = Mainspecies), position = "jitter")
outlier <- arrange(starwars, desc(mass)) %>% head(1)
select(outlier, name, height, mass, species)
plot.settings <- filter(starwars, (species == "Human" | species == "Droid") & is.na(height)==FALSE & is.na(mass)==FALSE) %>% ggplot( aes(x = height, y = mass)) +
labs(x = "Height (cm)", y = "Weight (kg)") +
theme_classic()
plot.settings +
geom_point(aes(x = height, y = mass), position = "jitter") +
facet_wrap(~species) +
geom_smooth(method = "lm")
filter(starwars, is.na(Mainspecies)==FALSE & is.na(height)==FALSE) %>% ggplot() +
geom_boxplot(aes(x = Mainspecies, y = height)) +
labs(x="Mainspecies", y="Height (cm)", title = "Boxplots of height of each mainspecies")
filter(starwars, is.na(Mainspecies)==FALSE) %>% ggplot() +
geom_bar(aes(x = Mainspecies, fill = eye_color), position = "fill") +
coord_flip() +
labs(x = "Mainspecies", y = "Proportion",fill = "Eye colors", title = "The proportions of the various eye colours within each mainspecies")
#Box plot of price for categorical predictors
library(ggplot2)
airfoil_self_noise%>%
dplyr::select(decibels, where(is.factor))%>%
ggplot(aes(y=decibels))+
geom_boxplot()
x=chord.length,
#Box plot of price for categorical predictors
library(ggplot2)
airfoil_self_noise%>%
dplyr::select(decibels, where(is.factor))%>%
ggplot(aes(x=chord.length,y=decibels))+
geom_boxplot()
#Box plot of price for categorical predictors
library(ggplot2)
airfoil_self_noise%>%
##dplyr::select(decibels, where(is.factor))%>%
ggplot(aes(x=chord.length,y=decibels))+
geom_boxplot()
#Box plot of price for categorical predictors
library(ggplot2)
airfoil_self_noise%>%
dplyr::select(decibels, where(is.factor))%>%
ggplot(aes(x=chord.length,y=decibels))+
geom_boxplot()
ggplot(airfoil_self_noise) +
geom_boxplot(aes(x=chord.length,y=decibels)) +
lab(title="Boxplot of Decibels vs. Chord.length")
#Box plot of price for categorical predictors
library(ggplot2)
ggplot(airfoil_self_noise) +
geom_boxplot(aes(x=chord.length,y=decibels)) +
lab(title="Boxplot of Decibels vs. Chord.length")
#Box plot of price for categorical predictors
library(ggplot2)
ggplot(airfoil_self_noise) +
geom_boxplot(aes(x=chord.length,y=decibels)) +
labs(title="Boxplot of Decibels vs. Chord.length")
#Box plot of price for categorical predictors
library(ggplot2)
ggplot(airfoil_self_noise) +
geom_boxplot(aes(x=chord.length,y=decibels)) +
labs(title="Boxplot of Decibels of each Chord lengths")
#Box plot of price for categorical predictors
library(ggplot2)
ggplot(airfoil_self_noise) +
geom_boxplot(aes(x=chord.length,y=decibels)) +
labs(title="Boxplot of Decibels of each Chord length values")
#Box plot of price for categorical predictors
library(ggplot2)
ggplot(airfoil_self_noise) +
geom_boxplot(aes(x=chord.length,y=decibels)) +
labs(x= "Chord Length", y= "Decibels",title="Boxplot of Decibels of each Chord length values")
ggplot(airfoil_self_noise) +
geom_boxplot(aes(x=chord.length,y=decibels)) +
labs(x= "Chord Length", y= "Decibel",title="Boxplot of Decibels of each Chord length values")
#Box plot of price for categorical predictors
library(ggplot2)
ggplot(airfoil_self_noise) +
geom_boxplot(aes(x=chord.length,y=decibels)) +
labs(x= "Chord Length (meters)", y= "Decibel",title="Boxplot of Decibels of each Chord length values")
#Box plot of price for categorical predictors
library(ggplot2)
ggplot(airfoil_self_noise) +
geom_boxplot(aes(x=chord.length,y=decibels)) +
labs(x= "Chord Length (meters)", y= "Decibel",title="Boxplot of Decibels for each Chord length values")
#Box plot of decibels for categorical variables
library(ggplot2)
ggplot(airfoil_self_noise) +
geom_boxplot(aes(x=chord.length,y=decibels)) +
labs(x= "Chord Length (meters)", y= "Decibel",title="Boxplot of Decibels for each Chord length values")
ggplot(airfoil_self_noise) +
geom_boxplot(aes(x=speed,y=decibels)) +
labs(x= "Speed (meters/second)", y= "Decibel",title="Boxplot of Decibels for each Speed values")
#Box plot of decibels for categorical variables
library(ggplot2)
par(mfrow=c(2,2))
ggplot(airfoil_self_noise) +
geom_boxplot(aes(x=chord.length,y=decibels)) +
labs(x= "Chord Length (meters)", y= "Decibel",title="Boxplot of Decibels for each Chord length values")
ggplot(airfoil_self_noise) +
geom_boxplot(aes(x=speed,y=decibels)) +
labs(x= "Speed (meters/second)", y= "Decibel",title="Boxplot of Decibels for each Speed values")
ggplot(airfoil_self_noise) +
geom_boxplot(aes(x=chord.length,y=decibels)) +
labs(x= "Chord Length (meters)", y= "Decibel",title="Boxplot of Decibels for each Chord length values")
#Box plot of decibels for categorical variables
library(ggplot2)
par(mfrow=c(2,2))
ggplot(airfoil_self_noise) +
geom_boxplot(aes(x=chord.length,y=decibels)) +
labs(x= "Chord Length (meters)", y= "Decibel",title="Boxplot of Decibels for each Chord length values")
ggplot(airfoil_self_noise) +
geom_boxplot(aes(x=speed,y=decibels)) +
labs(x= "Speed (meters/second)", y= "Decibel",title="Boxplot of Decibels for each Speed values")
#Data visualisations
#Scatterplot matrix for numerical variables
library(dplyr)
library(psych)
airfoil_self_noise%>%
dplyr::select(where(is.numeric))%>% #select numerical variables (includes integers)
pairs.panels(method = "spearman", # correlation method
hist.col = "lightgreen", # histogram color
density = TRUE, # show density plots
ellipses = FALSE # do not show correlation ellipses
)
#Box plot of decibels for categorical variables
library(ggplot2)
par(mfrow=c(1,2))
ggplot(airfoil_self_noise) +
geom_boxplot(aes(x=chord.length,y=decibels)) +
labs(x= "Chord Length (meters)", y= "Decibel",title="Boxplot of Decibels for each Chord length values")
par(mfrow(2,2))
#Box plot of decibels for categorical variables
library(ggplot2)
par(mfrow=c(1,2))
ggplot(airfoil_self_noise) +
geom_boxplot(aes(x=chord.length,y=decibels)) +
labs(x= "Chord Length (meters)", y= "Decibel",title="Boxplot of Decibels for each Chord length values")
par(mfrow=c(2,2))
ggplot(airfoil_self_noise) +
geom_boxplot(aes(x=speed,y=decibels)) +
labs(x= "Speed (meters/second)", y= "Decibel",title="Boxplot of Decibels for each Speed values")
par(mfrow=c(2,2))
boxplot(split(airfoil_self_noise$decibels, airfoil_self_noise$chord.length), xlab = "Chord length (meters)", ylab = "Decibels", main = "Boxplot of Decibels for each Chord length values")
boxplot(split(airfoil_self_noise$decibels, airfoil_self_noise$speed), xlab = "Speed (meters/second)", ylab = "Decibels", main = "Boxplot of Decibels for each Speed values")
par(mfrow=c(2,2), cex = 0.5)
par(mfrow=c(2,2), cex = 0.5)
boxplot(split(airfoil_self_noise$decibels, airfoil_self_noise$chord.length), xlab = "Chord length (meters)", ylab = "Decibels", main = "Boxplot of Decibels for each Chord length values")
boxplot(split(airfoil_self_noise$decibels, airfoil_self_noise$speed), xlab = "Speed (meters/second)", ylab = "Decibels", main = "Boxplot of Decibels for each Speed values")
par(mfrow=c(2,2), cex = 0.75)
par(mfrow=c(2,2), cex = 0.75)
boxplot(split(airfoil_self_noise$decibels, airfoil_self_noise$chord.length), xlab = "Chord length (meters)", ylab = "Decibels", main = "Boxplot of Decibels for each Chord length values")
boxplot(split(airfoil_self_noise$decibels, airfoil_self_noise$speed), xlab = "Speed (meters/second)", ylab = "Decibels", main = "Boxplot of Decibels for each Speed values")
?par
